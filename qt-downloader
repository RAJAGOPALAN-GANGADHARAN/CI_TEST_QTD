#!/usr/bin/env python3

import argparse
import platform
import requests
import semantic_version
import shutil
import subprocess
import sys
import urllib.request
from lxml import etree, html
from pathlib import Path


BaseUrl = 'https://download.qt.io/online/qtsdkrepository/'

OsMap = {
  'macos': 'mac_x64',
  'linux': 'linux_x64',
  'windows': 'windows_x86'
}


def key_by_value(dict, value):
  return next((left for left, right in dict.items() if right == value), None)


def decode_version(v):
  v = list(v)
  major = v.pop(0)
  patch = v.pop() if len(v) > 1 else 0
  minor = ''.join(v)
  return '{}.{}.{}'.format(major, minor, patch)


def deduce_os():
  os_type = platform.system().lower()
  if os_type == 'darwin':
    os_type = 'macos'
  return os_type


def discover_dirs(url):
  reply = requests.get(url)
  page = html.fromstring(reply.content)
  items = page.xpath('//table//tr[position()>2]//a[not(starts-with(@href, "/"))]/@href')
  return [item for item in items if item.endswith('/')]


def discover_kits(args):
  os_dict = {}
  os_types = discover_dirs(BaseUrl)
  for os_type in os_types:
    human_os = key_by_value(OsMap, os_type[:-1])
    current_os = human_os if human_os is not None else os_type[:-1]
    os_dict[current_os] = None

    if not (args.os == 'discover' and args.all or args.os != 'discover' and args.os in [os_type[:-1], human_os]):
      continue

    targets_dict = {}
    targets = discover_dirs(BaseUrl + os_type)
    targets = [target for target in targets if target != 'root/']
    for target in targets:
      targets_dict[target[:-1]] = None

      if not (args.target == 'discover' and args.all or args.target != 'discover' and args.target == target[:-1]):
        continue

      versions_dict = {}
      versions = discover_dirs(BaseUrl + os_type + target)
      for version in versions:
        if version.startswith('tools_') or version.endswith('_preview/') or version.endswith('_wasm/') or '_src' in version or not version.startswith('qt5_'):
          continue

        ver = decode_version(version[len('qt5_'):-1])
        versions_dict[ver] = None

        if not (args.version == 'discover' and args.all or args.version != 'discover' and args.version != 'latest' and args.version == ver):
          continue

        toolchains = discover_dirs(BaseUrl + os_type + target + version)
        toolchains = [toolchain.split('.')[2:] for toolchain in toolchains]
        toolchains = [toolchain[-1] for toolchain in toolchains if len(toolchain) > 0]
        toolchains = set([toolchain[:-1] for toolchain in toolchains if not toolchain.startswith('qt') and not toolchain.startswith('debug')])

        versions_dict[ver] = toolchains

      targets_dict[target[:-1]] = versions_dict

    os_dict[current_os] = targets_dict

  return os_dict


def build_url(args):
  ver = args.version.replace('.', '')
  return BaseUrl + '{}/{}/qt5_{}/'.format(OsMap[args.os], args.target, ver)


def get_info(url, version, toolchain):
  reply = requests.get(url + "Updates.xml")
  update_xml = etree.fromstring(reply.content)

  ver = version.replace('.', '')

  for package in update_xml.xpath('//PackageUpdate'):
    name = package.xpath('Name/text()')[0]
    if name.startswith('qt.') and name.endswith('.{}.{}'.format(ver, toolchain)):
      version = package.xpath('Version/text()')[0]
      archives = package.xpath('DownloadableArchives/text()')[0].split(', ')
      return (name, version, archives)

  print('Update.xml does not contain proper entry for Qt kit', file=sys.stderr)
  return None


def download_and_extract(archives_url, archives):
  for archive in archives:
    try:
      module = archive.split('-')[0]
      print('Downloading module {}... '.format(module), end='', flush=True)
      with urllib.request.urlopen(archives_url + archive) as response, open(archive, 'wb') as out_file:
        shutil.copyfileobj(response, out_file)

      print('\rExtracting module {}... '.format(module), end='', flush=True)
      subprocess.run('7z x {}'.format(archive), shell=True, check=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      print('\rInstalled module {} successfully'.format(module))
    except subprocess.CalledProcessError as e:
      print('Error: {}'.format(e))

      os_type = deduce_os()
      saggestion = ''
      if os_type == 'linux':
        suggestion = ' Run sudo apt install p7zip-full on Ubuntu'
      elif os_type == 'macos':
        suggestion = ' Run brew install p7zip on macOS'
        
      raise RuntimeError('Check that 7z command is in your PATH.{}'.format(suggestion))
    except KeyboardInterrupt:
      print('Interrupted')
      raise KeyboardInterrupt
    finally:
      Path(archive).unlink()

  print('Finished installation')


def show_discover_context(args, parser):
  if args.os != 'discover':
    if args.os == 'auto':
      args.os = deduce_os()

    print('OS type: {}'.format(args.os))

  if args.target != 'discover':
    print('Target: {}'.format(args.target))

  if args.version != 'discover':
    if args.version == 'latest':
      print('Discovering latest version... ', end='')
      kits = discover_kits(args)
      print('Done')
      check_os_type(args, kits)
      targets = kits[args.os]
      check_targets(args, targets)
      versions = targets[args.target]
      args.version = str(sorted(map(semantic_version.Version, versions.keys()))[-1])
    elif not semantic_version.validate(args.version):
      print('Wrong version: {}. Should follow Semantic Versioning format: major.minor.patch\n'.format(args.version), file=sys.stderr)
      parser.print_help()
      sys.exit(1)

    print('Qt version: {}'.format(args.version))

  if args.toolchain != 'discover':
    print('Toolchain: {}'.format(args.toolchain))


def show_discovered_parameters(args, params, labels):
  print('Discovering available ', end='')
  
  discoverables = []
  for index, param in enumerate(params):
    if param == 'discover':
      discoverables.append(labels[index])

  if not args.all:
    discoverables = discoverables[:1]

  if len(discoverables) == 1:
    print('{}...'.format(discoverables[0]), end='', flush=True)
  elif len(discoverables) == 2:
    print('{}...'.format(' and '.join(discoverables)), end='', flush=True)
  else:
    print('{}, and {}...'.format(', '.join(discoverables[:-1]), discoverables[-1]), end='', flush=True)


def show_os_types_only(kits):
  print('  Choose from: {}'.format(', '.join(sorted(kits.keys()))))


def show_targets_only(targets):
  print('  Choose from: {}'.format(', '.join(sorted(targets.keys()))))


def show_versions_only(versions):
  print('  Choose from: {}'.format(', '.join(map(str, sorted(map(semantic_version.Version, versions.keys()))))))


def show_toolchains_only(toolchains):
  print('  Choose from: {}'.format(', '.join(sorted(toolchains))))


def check_os_type(args, kits):
  if not args.os in kits:
    print('  Unknown OS type: {}'.format(args.os))
    show_os_types_only(kits)
    sys.exit(1)


def check_targets(args, targets):
  if not args.target in targets:
    print('  Unknown target: {}'.format(args.target))
    show_targets_only(targets)
    sys.exit(1)


def check_versions(args, versions):
  if not args.version in versions:
    print('  Unknown version: {}'.format(args.version))
    show_versions_only(versions)
    sys.exit(1)


def check_toolchains(args, toolchains):
  if not args.toolchain in toolchains:
    print('  Unknown toolchain: {}'.format(args.toolchain))
    show_toolchains_only(toolchains)
    sys.exit(1)

def show_os_types_and_all(kits, indent = 0):
  for os_type, targets in kits.items():
    print('  {}{}:'.format('  ' * indent, os_type))
    show_targets_and_all(targets, indent + 1)


def show_targets_and_all(targets, indent = 0):
  for target, versions in sorted(targets.items()):
    print('  {}Target {} supports toolchains:'.format('  ' * indent, target))
    show_versions_and_all(versions, indent + 1)


def show_versions_and_all(versions, indent = 0):
  for version, toolchains in sorted(versions.items()):
    print('  {}{}: {}'.format('  ' * indent, version, ', '.join(sorted(toolchains))))


def show_discovery_results(args, kits):
  print(' Done')

  if args.os == 'discover':
    if not args.all:
      show_os_types_only(kits)
    else:
      show_os_types_and_all(kits)
  elif args.target == 'discover':
    check_os_type(args, kits)
    targets = kits[args.os]
    if not args.all:
      show_targets_only(targets)
    else:
      show_targets_and_all(targets)
  elif args.version == 'discover':
    check_os_type(args, kits)
    targets = kits[args.os]
    check_targets(args, targets)
    versions = targets[args.target]
    if not args.all:
      show_versions_only(versions)
    else:
      show_versions_and_all(versions)
  elif args.toolchain == 'discover':
    check_os_type(args, kits)
    targets = kits[args.os]
    check_targets(args, targets)
    versions = targets[args.target]
    check_versions(args, versions)
    toolchains = versions[args.version]
    show_toolchains_only(toolchains)
  else:
    check_os_type(args, kits)
    targets = kits[args.os]
    check_targets(args, targets)
    versions = targets[args.target]
    check_versions(args, versions)
    toolchains = versions[args.version]
    check_toolchains(args, toolchains)


def verify_parameters(args):
  print('Verifying arguments...', end='')
  kits = discover_kits(args)
  show_discovery_results(args, kits)


def main():
  parser = argparse.ArgumentParser(description='Qt downloader',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('os', nargs='?', default='discover', help='Operating system type: {}, auto, or discovered one. Omit this to discover available OS types'.format(', '.join(OsMap.keys())))
  parser.add_argument('target', nargs='?', default='discover', help='Target platform. Omit this to discover available targets')
  parser.add_argument('version', nargs='?', default='discover', help='Qt version conforming to Semantic Versioning format: major.minor.patch. Use \'latest\' to get most up to date version. Omit this to discover available versions.')
  parser.add_argument('toolchain', nargs='?', default='discover', help='Toolchain to use. Omit this to discover available toolchains')
  parser.add_argument('-a', '--all', action='store_true', help='Discover allowed values for all missing arguments')
  args = parser.parse_args()

  show_discover_context(args, parser)

  params = [args.os, args.target, args.version, args.toolchain]
  labels = ['OS types', 'targets', 'Qt versions', 'toolchains']
  if 'discover' in params:
    show_discovered_parameters(args, params, labels)
    kits = discover_kits(args)
    show_discovery_results(args, kits)
    sys.exit(0)
  else:
    verify_parameters(args)
    url = build_url(args)

    info = get_info(url, args.version, args.toolchain)
    if info is None:
      sys.exit(1)

    name, version, archives = info
    download_and_extract(url + name + '/' + version, archives)


if __name__ == '__main__':
  try:
    main()
  except IOError as error:
    print(error)
  except RuntimeError as error:
    print(error)
  except KeyboardInterrupt:
    print('Stopped by user')

